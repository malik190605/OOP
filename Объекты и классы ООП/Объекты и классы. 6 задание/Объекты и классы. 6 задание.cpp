// Объекты и классы. 6 задание.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <string>

// Перечисление для статуса сотрудника
enum class EType {
    LABORANT,  // Лаборант
    SECRETARY, // Секретарь
    MANAGER,   // Менеджер
    OTHER      // Другие должности
};

// Класс Date для хранения даты приема на работу
class Date {
private:
    int day;
    int month;
    int year;

public:
    // Конструктор с параметрами по умолчанию
    Date(int d = 1, int m = 1, int y = 2000) : day(d), month(m), year(y) {}

    // Метод для ввода даты
    void inputDate() {
        std::cout << "Введите день, месяц и год: ";
        std::cin >> day >> month >> year;
    }

    // Метод для отображения даты
    void displayDate() const {
        std::cout << day << "/" << month << "/" << year;
    }
};

// Класс Employee для хранения информации о сотруднике
class Employee {
private:
    std::string name;  // Имя сотрудника
    int id;            // Номер сотрудника
    double salary;     // Оклад сотрудника
    Date hireDate;     // Дата приема на работу
    EType position;    // Должность сотрудника

public:
    // Метод для ввода данных о сотруднике
    void getEmploy() {
        std::cout << "Введите имя сотрудника: ";
        std::cin >> name;
        std::cout << "Введите номер сотрудника: ";
        std::cin >> id;
        std::cout << "Введите оклад сотрудника: ";
        std::cin >> salary;
        std::cout << "Введите дату приема на работу (день месяц год): ";
        hireDate.inputDate();

        int pos;
        std::cout << "Введите статус сотрудника (0 - Лаборант, 1 - Секретарь, 2 - Менеджер, 3 - Другие): ";
        std::cin >> pos;
        position = static_cast<EType>(pos);
    }

    // Метод для отображения данных о сотруднике
    void putEmploy() const {
        std::cout << "\nИнформация о сотруднике:\n";
        std::cout << "Имя: " << name << "\n";
        std::cout << "Номер: " << id << "\n";
        std::cout << "Оклад: " << salary << "\n";
        std::cout << "Дата приема на работу: ";
        hireDate.displayDate();
        std::cout << "\nДолжность: ";

        // Используем switch для вывода должности
        switch (position) {
        case EType::LABORANT:
            std::cout << "Лаборант\n";
            break;
        case EType::SECRETARY:
            std::cout << "Секретарь\n";
            break;
        case EType::MANAGER:
            std::cout << "Менеджер\n";
            break;
        default:
            std::cout << "Другая должность\n";
            break;
        }
        
    }
};

// Функция main для работы с данными сотрудников
int main() {
    setlocale(LC_ALL, "russian");
    Employee employees[3];  // Массив для трех сотрудников

    // Ввод данных о сотрудниках
    for (int i = 0; i < 3; ++i) {
        std::cout << "\nВведите информацию о сотруднике " << i + 1 << ":\n";
        employees[i].getEmploy();
    }

    // Вывод данных о сотрудниках
    for (int i = 0; i < 3; ++i) {
        employees[i].putEmploy();
    }

    return 0;
}


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
